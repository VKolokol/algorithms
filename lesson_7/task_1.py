"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в
виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
import random
from timeit import timeit


# оптимальный вариант сортировки пузырьком
def sort_list(a):
    if len(a) < 2:
        return a
    for i in range(N - 1):
        check = True
        for j in range(N - i - 1):
            if a[j] < a[j + 1]:
                a[j], a[j + 1] = a[j + 1], a[j]
                check = False
        if check:
            break
    return a


# более медленный вариант с while
def sort_list2(a):
    if len(a) < 2:
        return a
    j = 0
    check = 0
    while True:
        if j == N - 1 and check > 0:
            j, check = 0, 0
        if a[j] < a[j + 1]:
            a[j], a[j + 1] = a[j + 1], a[j]
            check += 1
        if check == 0 and j == N - 2:
            break
        j += 1
    return a


obj = [random.randint(-100, 99) for _ in range(10)]
obj2 = [random.randint(-100, 99) for _ in range(10)]
# obj = [1, 4, 6, 7, 3, 6, 7, 8, 9]
N = len(obj)
print(sort_list(obj))
print(sort_list2(obj2))
#print(timeit('sort_list(obj[:])', globals=globals(), number=100))
#print(timeit('sort_list2(obj2[:])', globals=globals(), number=100))



""" В рабочий алгоритм сортировки пузырьком добавил две проверки: 1. Довольно простая, если список состоит из
одного элемента - он отсортирован; 2. если за объод никаких изменений не происходит (check == 0 или True), то
список отсортирован.

Доработка помогла: во-первых это уменьшило время ожидания. Если список УЖЕ отсортирован переменная check не изменяется,
а это значит, что нет нужды проходится еще раз по списку и тратить на это время. Во-вторых первая проверка, помогает
избежать проходки по списку, если список содержит один или менее элементов. Так как он уже является
отсортированным. Это небольшой плюс, но все же он есть и для квадратичной сложность по О-большому может
сыграть на пользу - то бишь сократить время ожидания результата"""