"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""


# Линейно-логарифмическая --> O(NlogN)


def check_2(dict_obj, top):
    check_list = list(dict_obj.items())  #O(N)
    check_list.sort(reverse=True, key=lambda i: i[1]) #O(NlogN)
    return dict(check_list[0:top])  #O(N)  - вот здесь вопрос(?), есть подозрение, что это N^2


# Квадратичная сложность - O(n^2) ~ N + NlogN + N^2
def check_1(dict_obj, top):
    top_company = {}
    check_lst = list(dict_obj.values())  #O(N)
    check_lst.sort(reverse=True)  #O(NlogN)
    for char in check_lst:   #O(N)
        for el in dict_obj.keys(): #O(N) --> O(n) * O(n) = O(n^2)
            if dict_obj[el] == char:
                if len(top_company) == top:
                    return top_company
                top_company.update({el: dict_obj[el]})


work_dict = {'Google':100000, 'Tesla': 1000000,  'NASA': 100000000,  'ASA': 12124,  'GZP': 212144, 'ONGS': 4566}
print(check_1(work_dict, 3))
print(check_2(work_dict, 3))

""" Сразу видно по коду, что первый вариант лучше не только по скорости обработки, 
но и виду (4 элегантные строчки с лямбда функцией смотрятся профессионально, 
нежели многоэтажная функция с повторяющимися for и if. Ну и конечно же время обработки, 
которое ниже засчет log-решения (так скажем)"""